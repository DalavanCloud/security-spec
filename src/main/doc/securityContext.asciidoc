////
//
// ORACLE AMERICA, INC. IS WILLING TO LICENSE THIS SPECIFICATION TO YOU ONLY UPON THE
// CONDITION THAT YOU ACCEPT ALL OF THE TERMS CONTAINED IN THIS LICENSE AGREEMENT
// ("AGREEMENT"). PLEASE READ THE TERMS AND CONDITIONS OF THIS AGREEMENT CAREFULLY. BY
// DOWNLOADING THIS SPECIFICATION, YOU ACCEPT THE TERMS AND CONDITIONS OF THIS AGREEMENT.
// IF YOU ARE NOT WILLING TO BE BOUND BY THEM, SELECT THE "DECLINE" BUTTON AT THE BOTTOM OF
// THIS PAGE AND THE DOWNLOADING PROCESS WILL NOT CONTINUE.
// 
// Specification: JSR-375 Java EE Security API ("Specification")
// Version: 1.0
// Status: Early Draft Review
// Release: March 2017
// 
// Copyright 2017 Oracle America, Inc.
// 500 Oracle Parkway, Redwood City, California 94065, U.S.A.
// 
// All rights reserved.
// 
// NOTICE
// The Specification is protected by copyright and the information described therein may be protected by
// one or more U.S. patents, foreign patents, or pending applications. Except as provided under the
// following license, no part of the Specification may be reproduced in any form by any means without the
// prior written authorization of Oracle America, Inc. ("Oracle") and its licensors, if any. Any use of the
// Specification and the information described therein will be governed by the terms and conditions of this
// Agreement.
// 
// Subject to the terms and conditions of this license, including your compliance with Paragraphs 1 and 2
// below, Oracle hereby grants you a fully-paid, non-exclusive, non-transferable, limited license (without
// the right to sublicense) under Oracle's intellectual property rights to:
// 
// 1.Review the Specification for the purposes of evaluation. This includes: (i) developing implementations
// of the Specification for your internal, non-commercial use; (ii) discussing the Specification with any third
// party; and (iii) excerpting brief portions of the Specification in oral or written communications which
// discuss the Specification provided that such excerpts do not in the aggregate constitute a significant
// portion of the Technology.
// 
// 2.Distribute implementations of the Specification to third parties for their testing and evaluation use,
// provided that any such implementation:
// (i) does not modify, subset, superset or otherwise extend the Licensor Name Space, or include any
// public or protected packages, classes, Java interfaces, fields or methods within the Licensor Name Space
// other than those required/authorized by the Specification or Specifications being implemented;
// (ii) is clearly and prominently marked with the word "UNTESTED" or "EARLY ACCESS" or
// "INCOMPATIBLE" or "UNSTABLE" or "BETA" in any list of available builds and in proximity to every link
// initiating its download, where the list or link is under Licensee's control; and
// (iii) includes the following notice:
// "This is an implementation of an early-draft specification developed under the Java Community Process
// (JCP) and is made available for testing and evaluation purposes only. The code is not compatible with
// any specification of the JCP."
// 
// The grant set forth above concerning your distribution of implementations of the specification is
// contingent upon your agreement to terminate development and distribution of your "early draft"
// implementation as soon as feasible following final completion of the specification. If you fail to do so,
// the foregoing grant shall be considered null and void.
// 
// No provision of this Agreement shall be understood to restrict your ability to make and distribute to
// third parties applications written to the Specification.
// 
// Other than this limited license, you acquire no right, title or interest in or to the Specification or any
// other Oracle intellectual property, and the Specification may only be used in accordance with the license
// terms set forth herein. This license will expire on the earlier of: (a) two (2) years from the date of
// Release listed above; (b) the date on which the final version of the Specification is publicly released; or
// (c) the date on which the Java Specification Request (JSR) to which the Specification corresponds is
// withdrawn. In addition, this license will terminate immediately without notice from Oracle if you fail to
// comply with any provision of this license. Upon termination, you must cease use of or destroy the
// Specification.
// 
// "Licensor Name Space" means the public class or interface declarations whose names begin with "java",
// "javax", "com.oracle" or their equivalents in any subsequent naming convention adopted by Oracle
// through the Java Community Process, or any recognized successors or replacements thereof
// 
// TRADEMARKS
// No right, title, or interest in or to any trademarks, service marks, or trade names of Oracle or Oracle's
// licensors is granted hereunder. Oracle, the Oracle logo, and Java are trademarks or registered
// trademarks of Oracle America, Inc. in the U.S. and other countries.
// 
// DISCLAIMER OF WARRANTIES
// THE SPECIFICATION IS PROVIDED "AS IS" AND IS EXPERIMENTAL AND MAY CONTAIN DEFECTS OR
// DEFICIENCIES WHICH CANNOT OR WILL NOT BE CORRECTED BY ORACLE. ORACLE MAKES NO
// REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO,
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT
// THAT THE CONTENTS OF THE SPECIFICATION ARE SUITABLE FOR ANY PURPOSE OR THAT ANY PRACTICE
// OR IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
// COPYRIGHTS, TRADE SECRETS OR OTHER RIGHTS. This document does not represent any commitment to
// release or implement any portion of the Specification in any product.
// 
// THE SPECIFICATION COULD INCLUDE TECHNICAL INACCURACIES OR TYPOGRAPHICAL ERRORS. CHANGES
// ARE PERIODICALLY ADDED TO THE INFORMATION THEREIN; THESE CHANGES WILL BE INCORPORATED
// INTO NEW VERSIONS OF THE SPECIFICATION, IF ANY. ORACLE MAY MAKE IMPROVEMENTS AND/OR
// CHANGES TO THE PRODUCT(S) AND/OR THE PROGRAM(S) DESCRIBED IN THE SPECIFICATION AT ANY
// TIME. Any use of such changes in the Specification will be governed by the then-current license for the
// applicable version of the Specification.
// 
// LIMITATION OF LIABILITY
// TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL ORACLE OR ITS LICENSORS BE LIABLE FOR
// ANY DAMAGES, INCLUDING WITHOUT LIMITATION, LOST REVENUE, PROFITS OR DATA, OR FOR SPECIAL,
// INDIRECT, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS
// OF THE THEORY OF LIABILITY, ARISING OUT OF OR RELATED TO ANY FURNISHING, PRACTICING,
// MODIFYING OR ANY USE OF THE SPECIFICATION, EVEN IF ORACLE AND/OR ITS LICENSORS HAVE BEEN
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
// 
// You will hold Oracle (and its licensors) harmless from any claims based on your use of the Specification
// for any purposes other than the limited right of evaluation as described above, and from any claims that
// later versions or releases of any Specification furnished to you are incompatible with the Specification
// provided to you under this license.
// 
// RESTRICTED RIGHTS LEGEND
// If this Software is being acquired by or on behalf of the U.S. Government or by a U.S. Government prime
// contractor or subcontractor (at any tier), then the Government's rights in the Software and
// accompanying documentation shall be only as set forth in this license; this is in accordance with 48
// C.F.R. 227.7201 through 227.7202-4 (for Department of Defense (DoD) acquisitions) and with 48 C.F.R.
// 2.101 and 12.212 (for non-DoD acquisitions).
// 
// REPORT
// You may wish to report any ambiguities, inconsistencies or inaccuracies you may find in connection with
// your evaluation of the Specification ("Feedback"). To the extent that you provide Oracle with any
// Feedback, you hereby: (i) agree that such Feedback is provided on a non-proprietary and non-
// confidential basis, and (ii) grant Oracle a perpetual, non-exclusive, worldwide, fully paid-up, irrevocable
// license, with the right to sublicense through multiple levels of sublicensees, to incorporate, disclose, and
// use without limitation the Feedback for any purpose related to the Specification and future versions,
// implementations, and test suites thereof.
// 
// GENERAL TERMS
// Any action related to this Agreement will be governed by California law and controlling U.S. federal law.
// The U.N. Convention for the International Sale of Goods and the choice of law rules of any jurisdiction
// will not apply.
// 
// The Specification is subject to U.S. export control laws and may be subject to export or import
// regulations in other countries. Licensee agrees to comply strictly with all such laws and regulations and
// acknowledges that it has the responsibility to obtain such licenses to export, re-export or import as may
// be required after delivery to Licensee.
// 
// This Agreement is the parties' entire agreement relating to its subject matter. It supersedes all prior or
// contemporaneous oral or written communications, proposals, conditions, representations and
// warranties and prevails over any conflicting or additional terms of any quote, order, acknowledgment,
// or other communication between the parties relating to its subject matter during the term of this
// Agreement. No modification to this Agreement will be binding, unless in writing and signed by an
// authorized representative of each party.
//
////

[[security-context]]

== Security Context

This chapter describes the _SecurityContext_ interface and contract.

=== Introduction

The Java EE platform defines a declarative security model via which resources can be constrained. These constraints are then enforced by the container. In some cases the declarative model is not sufficient, for example when more complex combinations of constraints and tests are needed than the declarative model allows. Programmatic security allows an application to perform tests and grant or deny access to resources itself. 

This specification provides an access point for programmatic security; the security context, represented by the _SecurityContect_ interface.

To facilitate portable implementations and coherence it is recommended that the implementation of many methods (see below) is done by using the Java Authorization Contract for Containers, also known as JACC (i.e., JSR 115). The JACC specification is available for download at: http://jcp.org/en/jsr/detail?id=115.

=== Retrieving and Testing for Caller Data

The _SecurityContect_ interface defines three methods that allow the application to test aspects of the caller data:

[source,java]
----
Principal getCallerPrincipal();

boolean isCallerInRole(String role);

List<String> getAllDeclaredCallerRoles();
----

The _getCallerPrincipal()_ method is provided to retrieve the _Principal_ that represents the caller's name. It MUST be possible for the application to downcast this _Principal_ to the exact _Principal_ type that was set by the _HttpAuthenticationMechanism_ (possibly via an _IdentityStore_) or a JASPIC _ServerAuthModule_.

The _isCallerInRole()_ method takes a String argument that represents the *application role* that is to be tested for. This excludes roles that are mapped to specific named Servlets or named EJB beans. It is undefined by this specification how the role determination is made, but to facilitate portable implementations and coherence it is recommended that the implementation of this method uses the Java Authorization Contract for Containers, also known as JACC (i.e., JSR 115). The JACC specification is available for download at: http://jcp.org/en/jsr/detail?id=115.

Following JACC, the following algorithm determines how to exactly test for the caller being in a given role:

* Obtain the current _Subject_ from the _PolicyContext_ using the "javax.security.auth.Subject.container" key.
* Create a _ProtectionDomain_ with the principals obtained from the _Subject_.
* Create a _WebRoleRefPermission_ with as name parameter the empty string and as actions parameter the role to be tested for.
* The outcome of this test is the result of calling the _implies_ method of the _Policy_ with the _ProtectionDomain_ and _WebRoleRefPermission_ as parameters.

If the implementation is not done using JACC, which is allowed albeit discouraged, the result must be the same as it would be if JACC was used and with the exception of roles mapped to a named Servlet or named EJB, the result of calling _isCallerInRole()_ MUST be the same as if the corresponding container-specific call had been made (e.g., _HttpServletRequest.isUserInRole()_), and MUST be consistent with the result implied by other specifications that prescribe role-mapping behavior.

The _getAllDeclaredCallerRoles()_ method returns all _static_ roles, meaning the roles that are declared upfront in the *web* application and are discovered during startup. For each role in this list the implementation MUST have ensured that the caller is currently indeed in that role, where "currently" refers to the context from where the call is made and the point in time that the call is made.

Following JACC, the following algorithm determines how to exactly establish the collection of roles that is to be returned by this method:

* Obtain the current _Subject_ from the _PolicyContext_ using the "javax.security.auth.Subject.container" key.
* Create a _ProtectionDomain_ with the principals obtained from the _Subject_, and use this _ProtectionDomain_ to obtain the _PermissionCollection_ from the _Policy_.
* Take all _WebRoleRefPermission_ instances from the _PermissionCollection_ and take as candidate roles the result of calling _getActions()_ on each such instance.
* For each candidate role determine if the caller is currently in that role as specified by the _isCallerInRole()_ method, if true, that role will be included in the collection of roles that are to be returned.

If the implementation is not done using JACC, which is allowed albeit discouraged, the result must be the same as it would be if JACC was used.

=== Testing for access

The _SecurityContect_ interface defines two overloaded methods that allow the application to programmatically test for access to a resource:

[source,java]
----
boolean hasAccessToWebResource(String resource);

boolean hasAccessToWebResource(String resource, String... methods);
----

The _hasAccessToWebResource(String resource)_ method determines if the caller has access to the provided "web resource" using the GET HTTP method, such as specified by section 13.8 of the Servlet specification, and the JACC specification, specifically the _WebResourcePermission_ type.

Following JACC, the following algorithm determines how to exactly test for the caller having access to the given web resource:

* Obtain the current _Subject_ from the _PolicyContext_ using the "javax.security.auth.Subject.container" key.
* Create a _ProtectionDomain_ with the principals obtained from the _Subject_.
* Create a _WebResourcePermission_ with as _urlPatternSpec_ parameter the resource to be tested for and as _HTTPMethods_ parameter an array of size one containing the string "GET".  
* The outcome of this test is the result of calling the _implies_ method of the _Policy_ with the _ProtectionDomain_ and _WebResourcePermission_ as parameters.

If the implementation is not done using JACC, which is allowed albeit discouraged, the result must be the same as it would be if JACC was used (which MUST give exactly the same access as defined by section 13.8 of the Servlet specification).

The _hasAccessToWebResource(String resource, String... methods)_ method is identical to _hasAccessToWebResource(String resource)_ with the difference that instead of the "GET" string the caller supplied strings from the _methods_ parameter are used.

As an example, consider the following Servlet definition:

[source,java]
----
@WebServlet("/protectedServlet")
@ServletSecurity(@HttpConstraint(rolesAllowed = "foo"))
public class ProtectedServlet extends HttpServlet { ... }
----

And the following call to _hasAccessToWebResource_:

[source,java]
----
securityContext.hasAccessToWebResource("/protectedServlet")
----

The above "hasAccessToWebResource" call would return true if and only if the caller is in role "foo".


=== Triggering the Authentication Process

The _SecurityContect_ interface defines two overloaded methods that allow the application to programmatically trigger the authentication process:

[source,java]
----
AuthStatus authenticate(HttpServletRequest request,
                        HttpServletResponse response,
                        AuthenticationParameters parameters);

AuthStatus authenticate(HttpServletResponse response,
                        AuthenticationParameters parameters);
----

Programmatically triggering means that the container responds as if the caller had attempted to access a constrained resource and responds with invoking a configured authentication mechanism (such as the _HttpAuthenticationMechanism_).

The _authenticate()_ method allows an application to signal to the container that it should start the authentication process with the caller. This method requires an _HttpServletResponse_ argument to be passed in, and can therefore only be used in a valid Servlet context.

****
*Review:*

* Need further explaintion/rationale for the additional parameters and signatures relative to HttpServletRequest.authenticate().
* Should state that implementation must behave consistent with JASPIC "Sub-profile for authenticate, login, and logout of HttpServletRequest".
* Should state that, when JASPIC/_HttpAuthenticationMechanism_ not configured, behavior is as defined by Servlet Spec, and authenticate() is undefined/ignored if the user is already authenticated -- i.e., is defined only for unprotected resources that allow anonymous access.
* Why no login()/logout() support?
****

=== Relationship to Other Specifications

The _SecurityContect_ implementation is a CDI bean, as defined by the CDI (JSR 346) specification.

Various methods of the _SecurityContect_ are encouraged, but not mandated, to be implemented by using the JACC (JSR 115) specification.

Various specifications in Java EE provide similar or even identical methods to those provided be the _SecurityContect_. It is the intention of this specification to supersede all of those and provide a cross-spec, platform alternative. The following gives an overview:

* Servlet spec - _HttpServletRequest#getUserPrincipal_, _HttpServletRequest#isUserInRole_
* EJB spec - _EJBContect#getCallerPrincipal_, _EJBContext#isCallerInRole_
* JAX-WS spec - _WebServiceContext#getUserPrincipal_, _WebServiceContext#isUserInRole_
* JAX-RS spec - _SecurityContext#getUserPrincipal_, _SecurityContext#isUserInRole_
* JSF spec - _ExternalContext#getUserPrincipal_, _ExternalContext#isUserInRole_
* CDI - _@Inject Principal_
* WebSockets - _Session#getUserPrincipal_
