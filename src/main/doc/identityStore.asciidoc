////
//
// ORACLE AMERICA, INC. IS WILLING TO LICENSE THIS SPECIFICATION TO YOU ONLY UPON THE
// CONDITION THAT YOU ACCEPT ALL OF THE TERMS CONTAINED IN THIS LICENSE AGREEMENT
// ("AGREEMENT"). PLEASE READ THE TERMS AND CONDITIONS OF THIS AGREEMENT CAREFULLY. BY
// DOWNLOADING THIS SPECIFICATION, YOU ACCEPT THE TERMS AND CONDITIONS OF THIS AGREEMENT.
// IF YOU ARE NOT WILLING TO BE BOUND BY THEM, SELECT THE "DECLINE" BUTTON AT THE BOTTOM OF
// THIS PAGE AND THE DOWNLOADING PROCESS WILL NOT CONTINUE.
// 
// Specification: JSR-375 Java EE Security API ("Specification")
// Version: 1.0
// Status: Early Draft Review
// Release: November 2016
// 
// Copyright 2016 Oracle America, Inc.
// 500 Oracle Parkway, Redwood City, California 94065, U.S.A.
// 
// All rights reserved.
// 
// NOTICE
// The Specification is protected by copyright and the information described therein may be protected by
// one or more U.S. patents, foreign patents, or pending applications. Except as provided under the
// following license, no part of the Specification may be reproduced in any form by any means without the
// prior written authorization of Oracle America, Inc. ("Oracle") and its licensors, if any. Any use of the
// Specification and the information described therein will be governed by the terms and conditions of this
// Agreement.
// 
// Subject to the terms and conditions of this license, including your compliance with Paragraphs 1 and 2
// below, Oracle hereby grants you a fully-paid, non-exclusive, non-transferable, limited license (without
// the right to sublicense) under Oracle's intellectual property rights to:
// 
// 1.Review the Specification for the purposes of evaluation. This includes: (i) developing implementations
// of the Specification for your internal, non-commercial use; (ii) discussing the Specification with any third
// party; and (iii) excerpting brief portions of the Specification in oral or written communications which
// discuss the Specification provided that such excerpts do not in the aggregate constitute a significant
// portion of the Technology.
// 
// 2.Distribute implementations of the Specification to third parties for their testing and evaluation use,
// provided that any such implementation:
// (i) does not modify, subset, superset or otherwise extend the Licensor Name Space, or include any
// public or protected packages, classes, Java interfaces, fields or methods within the Licensor Name Space
// other than those required/authorized by the Specification or Specifications being implemented;
// (ii) is clearly and prominently marked with the word "UNTESTED" or "EARLY ACCESS" or
// "INCOMPATIBLE" or "UNSTABLE" or "BETA" in any list of available builds and in proximity to every link
// initiating its download, where the list or link is under Licensee's control; and
// (iii) includes the following notice:
// "This is an implementation of an early-draft specification developed under the Java Community Process
// (JCP) and is made available for testing and evaluation purposes only. The code is not compatible with
// any specification of the JCP."
// 
// The grant set forth above concerning your distribution of implementations of the specification is
// contingent upon your agreement to terminate development and distribution of your "early draft"
// implementation as soon as feasible following final completion of the specification. If you fail to do so,
// the foregoing grant shall be considered null and void.
// 
// No provision of this Agreement shall be understood to restrict your ability to make and distribute to
// third parties applications written to the Specification.
// 
// Other than this limited license, you acquire no right, title or interest in or to the Specification or any
// other Oracle intellectual property, and the Specification may only be used in accordance with the license
// terms set forth herein. This license will expire on the earlier of: (a) two (2) years from the date of
// Release listed above; (b) the date on which the final version of the Specification is publicly released; or
// (c) the date on which the Java Specification Request (JSR) to which the Specification corresponds is
// withdrawn. In addition, this license will terminate immediately without notice from Oracle if you fail to
// comply with any provision of this license. Upon termination, you must cease use of or destroy the
// Specification.
// 
// "Licensor Name Space" means the public class or interface declarations whose names begin with "java",
// "javax", "com.oracle" or their equivalents in any subsequent naming convention adopted by Oracle
// through the Java Community Process, or any recognized successors or replacements thereof
// 
// TRADEMARKS
// No right, title, or interest in or to any trademarks, service marks, or trade names of Oracle or Oracle's
// licensors is granted hereunder. Oracle, the Oracle logo, and Java are trademarks or registered
// trademarks of Oracle America, Inc. in the U.S. and other countries.
// 
// DISCLAIMER OF WARRANTIES
// THE SPECIFICATION IS PROVIDED "AS IS" AND IS EXPERIMENTAL AND MAY CONTAIN DEFECTS OR
// DEFICIENCIES WHICH CANNOT OR WILL NOT BE CORRECTED BY ORACLE. ORACLE MAKES NO
// REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO,
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT
// THAT THE CONTENTS OF THE SPECIFICATION ARE SUITABLE FOR ANY PURPOSE OR THAT ANY PRACTICE
// OR IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
// COPYRIGHTS, TRADE SECRETS OR OTHER RIGHTS. This document does not represent any commitment to
// release or implement any portion of the Specification in any product.
// 
// THE SPECIFICATION COULD INCLUDE TECHNICAL INACCURACIES OR TYPOGRAPHICAL ERRORS. CHANGES
// ARE PERIODICALLY ADDED TO THE INFORMATION THEREIN; THESE CHANGES WILL BE INCORPORATED
// INTO NEW VERSIONS OF THE SPECIFICATION, IF ANY. ORACLE MAY MAKE IMPROVEMENTS AND/OR
// CHANGES TO THE PRODUCT(S) AND/OR THE PROGRAM(S) DESCRIBED IN THE SPECIFICATION AT ANY
// TIME. Any use of such changes in the Specification will be governed by the then-current license for the
// applicable version of the Specification.
// 
// LIMITATION OF LIABILITY
// TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL ORACLE OR ITS LICENSORS BE LIABLE FOR
// ANY DAMAGES, INCLUDING WITHOUT LIMITATION, LOST REVENUE, PROFITS OR DATA, OR FOR SPECIAL,
// INDIRECT, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS
// OF THE THEORY OF LIABILITY, ARISING OUT OF OR RELATED TO ANY FURNISHING, PRACTICING,
// MODIFYING OR ANY USE OF THE SPECIFICATION, EVEN IF ORACLE AND/OR ITS LICENSORS HAVE BEEN
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
// 
// You will hold Oracle (and its licensors) harmless from any claims based on your use of the Specification
// for any purposes other than the limited right of evaluation as described above, and from any claims that
// later versions or releases of any Specification furnished to you are incompatible with the Specification
// provided to you under this license.
// 
// RESTRICTED RIGHTS LEGEND
// If this Software is being acquired by or on behalf of the U.S. Government or by a U.S. Government prime
// contractor or subcontractor (at any tier), then the Government's rights in the Software and
// accompanying documentation shall be only as set forth in this license; this is in accordance with 48
// C.F.R. 227.7201 through 227.7202-4 (for Department of Defense (DoD) acquisitions) and with 48 C.F.R.
// 2.101 and 12.212 (for non-DoD acquisitions).
// 
// REPORT
// You may wish to report any ambiguities, inconsistencies or inaccuracies you may find in connection with
// your evaluation of the Specification ("Feedback"). To the extent that you provide Oracle with any
// Feedback, you hereby: (i) agree that such Feedback is provided on a non-proprietary and non-
// confidential basis, and (ii) grant Oracle a perpetual, non-exclusive, worldwide, fully paid-up, irrevocable
// license, with the right to sublicense through multiple levels of sublicensees, to incorporate, disclose, and
// use without limitation the Feedback for any purpose related to the Specification and future versions,
// implementations, and test suites thereof.
// 
// GENERAL TERMS
// Any action related to this Agreement will be governed by California law and controlling U.S. federal law.
// The U.N. Convention for the International Sale of Goods and the choice of law rules of any jurisdiction
// will not apply.
// 
// The Specification is subject to U.S. export control laws and may be subject to export or import
// regulations in other countries. Licensee agrees to comply strictly with all such laws and regulations and
// acknowledges that it has the responsibility to obtain such licenses to export, re-export or import as may
// be required after delivery to Licensee.
// 
// This Agreement is the parties' entire agreement relating to its subject matter. It supersedes all prior or
// contemporaneous oral or written communications, proposals, conditions, representations and
// warranties and prevails over any conflicting or additional terms of any quote, order, acknowledgment,
// or other communication between the parties relating to its subject matter during the term of this
// Agreement. No modification to this Agreement will be binding, unless in writing and signed by an
// authorized representative of each party.
//
////

[[identity-store]]

== Identity Store

This chapter describes the contract that specifies how a server-side authentication module (that is, an implementation of the HttpAuthenticationMechanism interface as defined by this specification) may delegate some of its security processing responsibilities to an identity store.


=== Introduction

A web application consists of resources that can be accessed by any number of callers that are initially unknown to the application. Callers make themselves known to the application via the process of authentication. In this process a caller presents a prove, the credential, which the application validates and if found to be correct responds to by making the data corresponding to this caller available.

For the transformation of a credential to caller data this specification defines a dedicated entity; the identity store, represented by the _IdentityStore_ interface.

=== Division of Responsibility

An _HttpAuthenticationMechanism_ is not mandated to delegate to an _IdentityStore_, and is free to perform a _{credentials in, caller data out}_ function itself or by delegating to any kind of proprietary entity. When an _HttpAuthenticationMechanism_ does delegate to an _IdentityStore_ it must do so by adhering to the constraints and semantics as described in this chapter.

An _HttpAuthenticationMechanism_ must not interact with an _IdentityStore_ directly but instead has to use the _IdentityStoreHandler_ and must do so in a caller environment independent fashion. This means specifically that an HttpAuthenticationMechanism is the only entity in this relation that may access the HTTP environment (for example, getting a request parameter or cookie from the (Http)ServletRequest). An _IdentityStore_ must only perform environment independent security processing (for example, verifying a username/password that was passed in to it as a String/char array and returning the caller data). In other words, the _IdentityStore_ must not directly interact with the caller and should perform a pure _{credentials in, caller data out}_ function.


=== State

An _IdentityStore_ is logically stateless. An _HttpAuthenticationMechanism_ using an _IdentityStore_ should not make any assumptions about the state of such _IdentityStore_ following one or more calls to it. Specifically, the _IdentityStore_ store must not be aware of the point the caller has reached in the authentication process and even more specifically the _IdentityStore_ should not keep track of whether a caller is authenticated or not at any given moment in time.

An _IdentityStore_ instance is allowed to make use of instance variables, for example to store configuration data like a URL to an LDAP server, to store actual caller data for in-memory lookup, use instance variables for the purpose of caching, etc.

=== Installation

Installation of an _IdentityStore_ depends on the CDI specification. That is, an _IdentityStore_ is considered installed and available for usage when it's available to the CDI runtime as an enabled Bean. An _IdentityStore_ is assumed to be normal scoped.

It *must* be possible for the definition of an _IdentityStore_ to exist within the application archive. Alternatively such definition may also exists outside the application archive, for example in a jar added to the classpath of an application server. 

=== Configuration

The _IdentityStore_ interface defines two methods that are used by the runtime to read configuration:

* int priority()
* ValidationType validationType()

The _priority_ method allows an _IdentityStore_ to be configured with an ordinal number that indicates in which order an _IdentityStore_ is consulted in case multiple ones are present, or more exactly when multiple enabled CDI Beans with type _IdentityStore_ are available. A lower value returned here means that _IdentityStore_ is called before an _IdentityStore_ returning a higher value. The order of being called is undefined when two _IdentityStore_ implementations return the same value.

The _validationType_ method returns an enum constant of type _ValidationType_, that indicates if an _IdentityStore_ is to be used for authentication only (meaning any group data it returns must be ignored), for authorization only (meaning it's not used for authentication, but only to obtain the group data from if the caller is authenticated via other means), or both (meaning it's used for authentication and any group data it returns is used).


=== Validation and obtaining caller data

The _IdentityStore_ interface defines two methods that are used by the runtime to validate a _Credential_ and/or to obtain caller data:

* CredentialValidationResult validate(Credential credential)
* List<String> getGroupsByCallerPrincipal(CallerPrincipal callerPrincipal)

The _validate_ method is provided to allow the runtime to validate that a _Credential_ is valid, and if so to obtain the caller data associated with the _Credential_. A _Credential_ passed in to this method is deemed to be valid if and only if the _getStatus_ method called on the result of type _CredentialValidationResult_ returns the enum constant _VALID_. In that case calling _getCallerPrincipal_ on this same result will yield a _Principal_ representing the name of the authenticated caller, and calling _getCallerGroups_ on this same result will yield a list of zero or more groups that the authenticated caller is in.

An _IdentityStore_ implementation is allowed to support multiple types of concrete _Credentials_, where a concrete _Credential_ is an implementation of the _Credential_ interface. It can do so by either implementing the _CredentialValidationResult validate(Credential credential)_ method and testing the type of the _Credential_ that's passed in, or by overriding the _validate(Credential credential)_ method by one or more methods where the method parameter of each of these methods is the exact type of the _Credential_ implementation that the _IdentityStore_ is capable of handling.

The following shows an example of such overloaded method definition:

```
public class ExampleIdentityStore implements IdentityStore {

    public CredentialValidationResult validate(UsernamePasswordCredential usernamePasswordCredential) {
        // Implementation ...
        return new CredentialValidationResult(...);
    }
}
```

If an implementation of the _validate_ method finds out it's not capable of handling the actual type of the _Credential_ that is passed in, it *must* return a _CredentialValidationResult_ on which calling the _getStatus_ method returns the enum constant _NOT_VALIDATED_.

If validation of the _Credential_ fails, for example when it consists of an unknown or expired token or a username/pasword combination that does not match, the _validate_ method *must* return a _CredentialValidationResult_ on which calling the _getStatus_ method returns the enum constant _INVALID_.

The _getGroupsByCallerPrincipal_ method is provided to allow the runtime to obtain the list of groups associated with the _CallerPrincipal_ that is passed in. This in an optional method and an _IdentityStore_ implementation is not mandated to support this. If an _IdentityStore_ implementation does support this method it must be consistent with the _validate_ method, meaning that if the _validate_ method returns a _VALID_ result with _CallerPrincipal_ "foo" and groups _{bar, kaz, zak}_, then passing this _CallerPrincipal_ "foo" into the _getGroupsByCallerPrincipal_ method should yield the same list of groups _{bar, kaz, zak}_.

=== Build-in IdentityStore beans

A Java EE container must allow build-in beans for the following _IdentityStore_ types to be made available via configuration:

* Embedded - allowing caller data to be stored directly in an annotation. This bean is activated and configured via the @EmbeddedIdentityStoreDefinition annotation.
* LDAP - allowing caller data to be stored in an external LDAP server. This bean is activated and configured via the @LdapIdentityStoreDefinition annotation.
* Database - allowing caller data to be stored in an external database accessible via a DataSource bound to JNDI. This bean is activated and configured via the @DataBaseIdentityStoreDefinition annotation.

All of all these beans must have the qualifier @Default and the scope @ApplicationScoped, as defined by the CDI specification.

=== Handling multiple identity stores

Access to the _IdentityStore_ is abstracted by the _IdentityStoreHandler_, which is an interface providing a single method:

* CredentialValidationResult validate(Credential credential)

For the caller, which is for this specification the _HttpAuthenticationMechanism_, the semantics of the _validate_ method are as described for the _IdentityStore_ method with the same signature.

The purpose of the _IdentityStoreHandler_ is to allow for the presence of multiple identity stores to logically act as a single _IdentityStore_ to the _HttpAuthenticationMechanism_. A compliant implementation of this specification must provide a default implementation of the _IdentityStoreHandler_ that is:

* an enabled CDI bean
* with qualier @Default and scope @ApplicationScoped, as defined by the CDI specification

The _validate_ method of the default implementation has to take the following actions:

* Call the _validate(Credential credential)_ method on all available _IdentityStore_ beans that declared to be capable of doing authentication in the order induced by the return value of the _getPriority_ method of each _IdentityStore_ (lower values returned by _getPriority_ means a lower order, and hence the _validate(Credential credential)_ method will be called sooner)
* For the first such call to the _validate(Credential credential)_ method that returns a result on which calling _getStatus()_ returns _VALID_, stop calling the _IdentityStore_ beans and remember this result.
* If all _IdentityStore_ beans have been called, and for none of those the _validate(Credential credential)_ method return a result on which calling _getStatus()_ returned a _VALID_ result, return the result of the last _IdentityStore_ that was consulted.
* If we have a _VALID_ result, call the _getGroupsByCallerPrincipal(CallerPrincipal callerPrincipal)_ method on all available _IdentityStore_ beans that declared to be capable of doing only authorization in the order induced by the return value of the _getPriority_ method of each _IdentityStore_ (lower values returned by _getPriority_ means a lower order, and hence the _validate(Credential credential)_ method will be called sooner). The _CallerPrincipal_ passed in to this method is the _CallerPrincipal_ obtained from the result of calling _validate(Credential credential)_ before.
* Return a new _CredentialValidationResult_ with status _VALID_, the _CallerPrincipal_ that was used in each call to the _getGroupsByCallerPrincipal_ method, and the collection of groups that is the combination of the groups returned by the result of the _validate(Credential credential)_ call for which _getStatus()_ returned _VALID_ and all of the groups returned by each call to the _getGroupsByCallerPrincipal_ method.


