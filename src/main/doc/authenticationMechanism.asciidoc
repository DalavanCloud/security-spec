////
//
// ORACLE AMERICA, INC. IS WILLING TO LICENSE THIS SPECIFICATION TO YOU ONLY UPON THE
// CONDITION THAT YOU ACCEPT ALL OF THE TERMS CONTAINED IN THIS LICENSE AGREEMENT
// ("AGREEMENT"). PLEASE READ THE TERMS AND CONDITIONS OF THIS AGREEMENT CAREFULLY. BY
// DOWNLOADING THIS SPECIFICATION, YOU ACCEPT THE TERMS AND CONDITIONS OF THIS AGREEMENT.
// IF YOU ARE NOT WILLING TO BE BOUND BY THEM, SELECT THE "DECLINE" BUTTON AT THE BOTTOM OF
// THIS PAGE AND THE DOWNLOADING PROCESS WILL NOT CONTINUE.
// 
// Specification: JSR-375 Java EE Security API ("Specification")
// Version: 1.0
// Status: Early Draft Review
// Release: March 2017
// 
// Copyright 2017 Oracle America, Inc.
// 500 Oracle Parkway, Redwood City, California 94065, U.S.A.
// 
// All rights reserved.
// 
// NOTICE
// The Specification is protected by copyright and the information described therein may be protected by
// one or more U.S. patents, foreign patents, or pending applications. Except as provided under the
// following license, no part of the Specification may be reproduced in any form by any means without the
// prior written authorization of Oracle America, Inc. ("Oracle") and its licensors, if any. Any use of the
// Specification and the information described therein will be governed by the terms and conditions of this
// Agreement.
// 
// Subject to the terms and conditions of this license, including your compliance with Paragraphs 1 and 2
// below, Oracle hereby grants you a fully-paid, non-exclusive, non-transferable, limited license (without
// the right to sublicense) under Oracle's intellectual property rights to:
// 
// 1.Review the Specification for the purposes of evaluation. This includes: (i) developing implementations
// of the Specification for your internal, non-commercial use; (ii) discussing the Specification with any third
// party; and (iii) excerpting brief portions of the Specification in oral or written communications which
// discuss the Specification provided that such excerpts do not in the aggregate constitute a significant
// portion of the Technology.
// 
// 2.Distribute implementations of the Specification to third parties for their testing and evaluation use,
// provided that any such implementation:
// (i) does not modify, subset, superset or otherwise extend the Licensor Name Space, or include any
// public or protected packages, classes, Java interfaces, fields or methods within the Licensor Name Space
// other than those required/authorized by the Specification or Specifications being implemented;
// (ii) is clearly and prominently marked with the word "UNTESTED" or "EARLY ACCESS" or
// "INCOMPATIBLE" or "UNSTABLE" or "BETA" in any list of available builds and in proximity to every link
// initiating its download, where the list or link is under Licensee's control; and
// (iii) includes the following notice:
// "This is an implementation of an early-draft specification developed under the Java Community Process
// (JCP) and is made available for testing and evaluation purposes only. The code is not compatible with
// any specification of the JCP."
// 
// The grant set forth above concerning your distribution of implementations of the specification is
// contingent upon your agreement to terminate development and distribution of your "early draft"
// implementation as soon as feasible following final completion of the specification. If you fail to do so,
// the foregoing grant shall be considered null and void.
// 
// No provision of this Agreement shall be understood to restrict your ability to make and distribute to
// third parties applications written to the Specification.
// 
// Other than this limited license, you acquire no right, title or interest in or to the Specification or any
// other Oracle intellectual property, and the Specification may only be used in accordance with the license
// terms set forth herein. This license will expire on the earlier of: (a) two (2) years from the date of
// Release listed above; (b) the date on which the final version of the Specification is publicly released; or
// (c) the date on which the Java Specification Request (JSR) to which the Specification corresponds is
// withdrawn. In addition, this license will terminate immediately without notice from Oracle if you fail to
// comply with any provision of this license. Upon termination, you must cease use of or destroy the
// Specification.
// 
// "Licensor Name Space" means the public class or interface declarations whose names begin with "java",
// "javax", "com.oracle" or their equivalents in any subsequent naming convention adopted by Oracle
// through the Java Community Process, or any recognized successors or replacements thereof
// 
// TRADEMARKS
// No right, title, or interest in or to any trademarks, service marks, or trade names of Oracle or Oracle's
// licensors is granted hereunder. Oracle, the Oracle logo, and Java are trademarks or registered
// trademarks of Oracle America, Inc. in the U.S. and other countries.
// 
// DISCLAIMER OF WARRANTIES
// THE SPECIFICATION IS PROVIDED "AS IS" AND IS EXPERIMENTAL AND MAY CONTAIN DEFECTS OR
// DEFICIENCIES WHICH CANNOT OR WILL NOT BE CORRECTED BY ORACLE. ORACLE MAKES NO
// REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO,
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT
// THAT THE CONTENTS OF THE SPECIFICATION ARE SUITABLE FOR ANY PURPOSE OR THAT ANY PRACTICE
// OR IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
// COPYRIGHTS, TRADE SECRETS OR OTHER RIGHTS. This document does not represent any commitment to
// release or implement any portion of the Specification in any product.
// 
// THE SPECIFICATION COULD INCLUDE TECHNICAL INACCURACIES OR TYPOGRAPHICAL ERRORS. CHANGES
// ARE PERIODICALLY ADDED TO THE INFORMATION THEREIN; THESE CHANGES WILL BE INCORPORATED
// INTO NEW VERSIONS OF THE SPECIFICATION, IF ANY. ORACLE MAY MAKE IMPROVEMENTS AND/OR
// CHANGES TO THE PRODUCT(S) AND/OR THE PROGRAM(S) DESCRIBED IN THE SPECIFICATION AT ANY
// TIME. Any use of such changes in the Specification will be governed by the then-current license for the
// applicable version of the Specification.
// 
// LIMITATION OF LIABILITY
// TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL ORACLE OR ITS LICENSORS BE LIABLE FOR
// ANY DAMAGES, INCLUDING WITHOUT LIMITATION, LOST REVENUE, PROFITS OR DATA, OR FOR SPECIAL,
// INDIRECT, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS
// OF THE THEORY OF LIABILITY, ARISING OUT OF OR RELATED TO ANY FURNISHING, PRACTICING,
// MODIFYING OR ANY USE OF THE SPECIFICATION, EVEN IF ORACLE AND/OR ITS LICENSORS HAVE BEEN
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
// 
// You will hold Oracle (and its licensors) harmless from any claims based on your use of the Specification
// for any purposes other than the limited right of evaluation as described above, and from any claims that
// later versions or releases of any Specification furnished to you are incompatible with the Specification
// provided to you under this license.
// 
// RESTRICTED RIGHTS LEGEND
// If this Software is being acquired by or on behalf of the U.S. Government or by a U.S. Government prime
// contractor or subcontractor (at any tier), then the Government's rights in the Software and
// accompanying documentation shall be only as set forth in this license; this is in accordance with 48
// C.F.R. 227.7201 through 227.7202-4 (for Department of Defense (DoD) acquisitions) and with 48 C.F.R.
// 2.101 and 12.212 (for non-DoD acquisitions).
// 
// REPORT
// You may wish to report any ambiguities, inconsistencies or inaccuracies you may find in connection with
// your evaluation of the Specification ("Feedback"). To the extent that you provide Oracle with any
// Feedback, you hereby: (i) agree that such Feedback is provided on a non-proprietary and non-
// confidential basis, and (ii) grant Oracle a perpetual, non-exclusive, worldwide, fully paid-up, irrevocable
// license, with the right to sublicense through multiple levels of sublicensees, to incorporate, disclose, and
// use without limitation the Feedback for any purpose related to the Specification and future versions,
// implementations, and test suites thereof.
// 
// GENERAL TERMS
// Any action related to this Agreement will be governed by California law and controlling U.S. federal law.
// The U.N. Convention for the International Sale of Goods and the choice of law rules of any jurisdiction
// will not apply.
// 
// The Specification is subject to U.S. export control laws and may be subject to export or import
// regulations in other countries. Licensee agrees to comply strictly with all such laws and regulations and
// acknowledges that it has the responsibility to obtain such licenses to export, re-export or import as may
// be required after delivery to Licensee.
// 
// This Agreement is the parties' entire agreement relating to its subject matter. It supersedes all prior or
// contemporaneous oral or written communications, proposals, conditions, representations and
// warranties and prevails over any conflicting or additional terms of any quote, order, acknowledgment,
// or other communication between the parties relating to its subject matter during the term of this
// Agreement. No modification to this Agreement will be binding, unless in writing and signed by an
// authorized representative of each party.
//
////

[[authentication-mechanism]]

== Authentication Mechanism

This section describes the _HttpAuthenticationMechanism_ interface and contract. _HttpAuthenticationMechanism_ is used to authenticate callers of web applications, and is specified only for use in the servlet container. It is explicitly not defined for use with other containers (EJB, JMS, JCA, etc.).

=== Introduction

A web application consists of resources that can be accessed by any number of callers that are initially unknown to the application. Callers make themselves known to the application through the process of authentication.

During authentication, the caller presents proof of identity -- a token or credential of some kind -- which the application (or container) then validates. If the proof is valid, the application (or container) establishes the caller's identity, then proceeds to the authorization step, in which it determines whether the caller has permission to access the requested resources.

In some cases (for example, username/password authentication) the iteraction between the caller and the application is simple. In other cases, a lengthier dialog is required -- an application may send a random nonce to the caller, which must then use that nonce in the construction an authentication token, or there may be interactions with a third party that vouches for the caller's identity, or the authenticity of the provided credential.

The Java EE Platform already specifies mechanisms for authenticating users of web applications. The Java Servlet Specification specifies a declarative mechanism for configuring an application to provide BASIC, DIGEST, FORM, or CERT authentication, with authentication performed automatically by the container based on the application's configuration, which, in the case of FORM authentication, can include custom form pages.

In addition, the Java Authentication SPI for Containers (JASPIC) specifies a general-purpose mechanism for securing messages sent between Java EE clients and servers. JASPIC defines an SPI called _ServerAuthModule_, which enables development of authentication modules to handle any credential type, or engage in interaction of arbitrary complexity with clients and third parties. JASPIC also includes the Servlet Container Profile, which specifies how JASPIC mechanisms, including _ServerAuthModules_, are integrated with the servlet container.

While both existing mechanisms are important and useful, each has limitations from the point of view of an application developer. The servlet container's _login-config_ mechanism is limited to the _auth-method_ types defined by the Java Servlet Specification -- it doesn't support other credential types, or complex interactions with callers. It also relies on unspecified container mechanisms to associate identity stores with applications. There is no way for an application to ensure that callers are authenticated against the desired identity store, or, indeed, against _any_ identity store.

JASPIC, by way of contrast, is extremely flexible and powerful, but is limited by its complexity. Writing an _AuthModule_ and arranging for the web container to use it for authentication, is a non-trivial exercise. Additionally, there is no declarative configuration syntax for JASPIC, and there is no well-defined mechanism for a container to override an application's programmatically-registered _AuthModule_. A container can choose to register its own _AuthModule_, or to remove one registred by an application, but JASPIC will always use the most-recently-registered module -- the outcome is dependent on the order in which the application and the container attempt to register their respective modules.

The _HttpAuthenticationMechanism_ interface is designed to capitalize on the strengths of the existing mechanisms, while mitigating the corresponding limitations. It is essentially a simplified, servlet-container-specific version of the JASPIC _ServerAuthModule_ interface, retaining that interface's flexibility and power while reducing the cost of implementation. Unlike _ServerAuthModule_, it does not require implementation of the _AuthConfig_ and _AuthConfigProvider_ modules normally required for integration with JASPIC. Instead, there is a declarative mechanism for configuring an _HttpAuthenticationMechanism_, and the container is responsible for ensuring that the _HttpAuthenticationMechanism_ is instantiated and invoked at runtime. (The container can also override the application's choice.) Integration with the servlet container leverages JASPIC; the container MUST configure and invoke the _HttpAuthenticationMechanism_ via JASPIC, as described below.

=== Interface and Theory of Operation
 
The _HttpAuthenticationMechanism_ interface defines three methods that align closely with the methods defined by the JASPIC _ServerAuth_ interface. The primary distinction is syntactic; unlike JASPIC, _HttpAuthenticationMechanism_ is specified for the servlet container only, and can therefore reference servlet types in its method signatures. Only the _validateRequest()_ method must be implemented; default behaviors are specified for the other two methods.

[source,java]
----
AuthStatus validateRequest(HttpServletRequest request,
                           HttpServletResponse response,
                           HttpMessageContext httpMessageContext
                          ) throws AuthException;
   
default AuthStatus secureResponse(HttpServletRequest request,
                                  HttpServletResponse response,
                                  HttpMessageContext httpMessageContext
                                 ) throws AuthException {
    return SEND_SUCCESS;
}

default void cleanSubject(HttpServletRequest request,
                          HttpServletResponse response,
                          HttpMessageContext httpMessageContext
                         ) {
    httpMessageContext.cleanClientSubject();
}
----

Each method MUST behave in a way semantically identical to the corresponding _ServerAuth_ method. At runtime, the methods will be invoked by a container-supplied _ServerAuthModule_ that serves as a wrapper, or container, for the _HttpAuthenticationMechanism_. The container-supplied _ServerAuthModule_ translates the method parameters passed to it, invokes the _HttpAuthenticationMechanism_ method, and returns the resulting status to its caller. The behavior of the _HttpAuthenticationMechanism_ methods MUST therefore be functionally equivalent to the behavior specified by the JASPIC Servlet Container Profile for the equivalent _ServerAuthModule_ methods.

Summarized, this means:

*  _validateRequest()_ will be invoked before the _doFilter()_ method of any servlet filter or the _service()_ method of any servlet in the application for requests to constrained as well as to unconstrained resources, and, in addition, in response to application code calling the _authenticate()_ method on the _HttpServletRequest_.

* _secureResponse()_ will be invoked after the _doFilter()_ method of any servlet filter or the _service()_ method of any servlet in the application for requests to constrained as well as to unconstrained resources, but only if any of these two methods have indeed been invoked.

* _cleanSubject()_ will be invoked in response to the application calling the _logout_ method on the _HttpServletRequest_.

The _validateRequest()_ method is provided to allow a caller to authenticate. An implementation of this method can inspect the HTTP request to for example extract a credential from an HTTP header, request parameter, post parameter, etc, or write to the HTTP response to for example redirect a caller to another resource such as a login form or an OAuth provider. After a credential has been obtained and validated, the result of this validation can be communicated to the container using the passed in _HttpMessageContext_, which is described in more detail below.

The _secureResponse()_ method is provided to allow post processing on the response generated by a servlet and/or servlet filter, such as encrypting it.

The _cleanSubject()_ is provided to allow for cleanup after a caller is logged out. For example, an authentication mechanism that stores state within a cookie can remove that cookie here.

=== Installation and Configuration

An application declares its intent to use an _HttpAuthenticationMechanism_ by including a _login-config_ with _auth-method_ set to "AUTHMECH" in its web.xml file. This _auth-method_ instructs the container to register a container-supplied JASPIC _AuthConfigProvider_ for the application's context. The _AuthConfigProvider_ MUST provide a _ServerAuthModule_ that delegates to an _HttpAuthenticationMechanism_. The _ServerAuthModule_ MUST use CDI to _@Inject_ an _HttpAuthenticationMechanism_.

The actual _HttpAuthenticationMechanism_ instance used at runtime is resolved via CDI. That is, an _HttpAuthenticationMechanism_ is considered installed and available for usage when it's available to the CDI runtime as an enabled Bean. An _HttpAuthenticationMechanism_ is assumed to be normal scoped.

It MUST be possible for the definition of an _HttpAuthenticationMechanism_ to exist within the application archive. Alternatively such definition MAY also exists outside the application archive, for example in a jar added to the classpath of an application server.

The server MAY make available an _HttpAuthenticationMechanism_ other than one supplied by the application, and SHOULD provide configuration to allow control over whether a system _HttpAuthenticationMechanism_, or the application's, is chosen at runtime, when both are present. This enables an application to provide its own _HttpAuthenticationMechanism_, for use when the deployment environment is not configured with identity stores for authentication, while allowing the same application to be deployed, unchanged, in environments where authentication against known identity stores must be enforced.

=== Relationship to other specifications

An _HttpAuthenticationMechanism_ is a CDI bean, as defined by the CDI (JSR 346) specification. The methods defined by the _HttpAuthenticationMechanism_ closely map to the methods and semantics of a _ServerAuthModule_ as defined by the Servlet Container Profile of the JASPIC (JSR 196) specification (but an _HttpAuthenticationMechanism_ is itself not a _ServerAuthModule_). The servlet container MUST use JASPIC mechanisms to arrange for an _HttpAuthenticationMechanism_ to be placed in service.

This specification mandates that when a _ServerAuthModule_ is called by the Servlet container, CDI services (such as the _BeanManager_) are fully available and all scopes that are defined to be active during the _service()_ method of a servlet, or during the _doFilter()_ method of servlet filter are active. Specifically this means that the request scope, session scope and application scope MUST be active, and that a _ServerAuthModule_ method such as _validateRequest_ MUST be capable of 1) obtaining a reference to the CDI _BeanManager_ via programmatic means (for example, by doing a JNDI lookup) and 2) can use this reference to obtain a valid request-scoped, session-scoped or application-scoped bean. This specification *does not* mandate that a _ServerAuthModule_ itself is a CDI bean or that a _ServerAuthModule_ is injectable.

An _HttpAuthenticationMechanism_ implementation is logically equivalent to a build-in authentication mechanism as defined by the Servlet spec, being HTTP Basic Authentication, HTTP Digest Authentication, Form Based Authentication and HTTPS Client Authentication, and more specifically is corresponding to an "additional container authentication mechanism" as described in section 13.6.5 of the Servlet spec.
