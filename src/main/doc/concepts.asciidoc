////
// 
// ORACLE AMERICA, INC. IS WILLING TO LICENSE THIS SPECIFICATION TO YOU ONLY UPON THE
// CONDITION THAT YOU ACCEPT ALL OF THE TERMS CONTAINED IN THIS AGREEMENT. PLEASE READ THE
// TERMS AND CONDITIONS OF THIS AGREEMENT CAREFULLY. BY DOWNLOADING THIS SPECIFICATION,
// YOU ACCEPT THE TERMS AND CONDITIONS OF THE AGREEMENT. IF YOU ARE NOT WILLING TO BE
// BOUND BY IT, SELECT THE "DECLINE" BUTTON AT THE BOTTOM OF THIS PAGE.
// 
// Specification: JSR-375 Java EE Security API ("Specification")
// 
// Version: 1.0
// 
// Status: Final Release
// 
// Specification Lead: Oracle America, Inc. ("Specification Lead")
// 
// Release: August 2017
// 
// Copyright 2017 Oracle America, Inc.
// All rights reserved.
// 
// LIMITED LICENSE GRANTS
// 
// 1. License for Evaluation Purposes. Specification Lead hereby grants you a fully-paid, non-exclusive, non-
// transferable, worldwide, limited license (without the right to sublicense), under Specification Lead's
// applicable intellectual property rights to view, download, use and reproduce the Specification only for
// the purpose of internal evaluation. This includes (i) developing applications intended to run on an
// implementation of the Specification, provided that such applications do not themselves implement any
// portion(s) of the Specification, and (ii) discussing the Specification with any third party; and (iii)
// excerpting brief portions of the Specification in oral or written communications which discuss the
// Specification provided that such excerpts do not in the aggregate constitute a significant portion of the
// Specification.
// 
// 2. License for the Distribution of Compliant Implementations. Specification Lead also grants you a
// perpetual, non-exclusive, non-transferable, worldwide, fully paid-up, royalty free, limited license
// (without the right to sublicense) under any applicable copyrights or, subject to the provisions of
// subsection 4 below, patent rights it may have covering the Specification to create and/or distribute an
// Independent Implementation of the Specification that: (a) fully implements the Specification including
// all its required interfaces and functionality; (b) does not modify, subset, superset or otherwise extend
// the Licensor Name Space, or include any public or protected packages, classes, Java interfaces, fields or
// methods within the Licensor Name Space other than those required/authorized by the Specification or
// Specifications being implemented; and (c) passes the Technology Compatibility Kit (including satisfying
// the requirements of the applicable TCK Users Guide) for such Specification ("Compliant
// Implementation"). In addition, the foregoing license is expressly conditioned on your not acting outside
// its scope. No license is granted hereunder for any other purpose (including, for example, modifying the
// Specification, other than to the extent of your fair use rights, or distributing the Specification to third
// parties). Also, no right, title, or interest in or to any trademarks, service marks, or trade names of
// Specification Lead or Specification Lead's licensors is granted hereunder. Java, and Java-related logos,
// marks and names are trademarks or registered trademarks of Oracle America, Inc. in the U.S. and other
// countries.
// 
// 3. Pass-through Conditions. You need not include limitations (a)-(c) from the previous paragraph or any
// other particular "pass through" requirements in any license You grant concerning the use of your
// Independent Implementation or products derived from it. However, except with respect to
// Independent Implementations (and products derived from them) that satisfy limitations (a)-(c) from the
// previous paragraph, You may neither: (a) grant or otherwise pass through to your licensees any licenses
// under Specification Lead's applicable intellectual property rights; nor (b) authorize your licensees to
// make any claims concerning their implementation's compliance with the Specification in question.
// 
// 4. Reciprocity Concerning Patent Licenses.
// 
// a. With respect to any patent claims covered by the license granted under subparagraph 2
// above that would be infringed by all technically feasible implementations of the Specification, such
// license is conditioned upon your offering on fair, reasonable and non-discriminatory terms, to any party
// seeking it from You, a perpetual, non-exclusive, non-transferable, worldwide license under Your patent
// rights which are or would be infringed by all technically feasible implementations of the Specification to
// develop, distribute and use a Compliant Implementation.
// 
// b. With respect to any patent claims owned by Specification Lead and covered by the license
// granted under subparagraph 2, whether or not their infringement can be avoided in a technically
// feasible manner when implementing the Specification, such license shall terminate with respect to such
// claims if You initiate a claim against Specification Lead that it has, in the course of performing its
// responsibilities as the Specification Lead, induced any other entity to infringe Your patent rights.
// 
// c. Also with respect to any patent claims owned by Specification Lead and covered by the license
// granted under subparagraph 2 above, where the infringement of such claims can be avoided in a
// technically feasible manner when implementing the Specification such license, with respect to such
// claims, shall terminate if You initiate a claim against Specification Lead that its making, having made,
// using, offering to sell, selling or importing a Compliant Implementation infringes Your patent rights.
// 
// 5. Definitions. For the purposes of this Agreement: "Independent Implementation" shall mean an
// implementation of the Specification that neither derives from any of Specification Lead's source code or
// binary code materials nor, except with an appropriate and separate license from Specification Lead,
// includes any of Specification Lead's source code or binary code materials; "Licensor Name Space" shall
// mean the public class or interface declarations whose names begin with "java", "javax", "com.oracle",
// "com.sun" or their equivalents in any subsequent naming convention adopted by Oracle America, Inc.
// through the Java Community Process, or any recognized successors or replacements thereof; and
// "Technology Compatibility Kit" or "TCK" shall mean the test suite and accompanying TCK User's Guide
// provided by Specification Lead which corresponds to the Specification and that was available either (i)
// from Specification Lead's 120 days before the first release of Your Independent Implementation that
// allows its use for commercial purposes, or (ii) more recently than 120 days from such release but against
// which You elect to test Your implementation of the Specification.
// 
// This Agreement will terminate immediately without notice from Specification Lead if you breach the
// Agreement or act outside the scope of the licenses granted above.
// 
// DISCLAIMER OF WARRANTIES
// 
// THE SPECIFICATION IS PROVIDED "AS IS". SPECIFICATION LEAD MAKES NO REPRESENTATIONS OR
// WARRANTIES, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT (INCLUDING AS A
// CONSEQUENCE OF ANY PRACTICE OR IMPLEMENTATION OF THE SPECIFICATION), OR THAT THE
// CONTENTS OF THE SPECIFICATION ARE SUITABLE FOR ANY PURPOSE. This document does not represent
// any commitment to release or implement any portion of the Specification in any product. In addition,
// the Specification could include technical inaccuracies or typographical errors.
// 
// LIMITATION OF LIABILITY
// 
// TO THE EXTENT NOT PROHIBITED BY LAW, IN NO EVENT WILL SPECIFICATION LEAD OR ITS LICENSORS BE
// LIABLE FOR ANY DAMAGES, INCLUDING WITHOUT LIMITATION, LOST REVENUE, PROFITS OR DATA, OR
// FOR SPECIAL, INDIRECT, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED
// AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF OR RELATED IN ANY WAY TO YOUR
// HAVING, IMPLEMENTING OR OTHERWISE USING THE SPECIFICATION, EVEN IF SPECIFICATION LEAD
// AND/OR ITS LICENSORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
// You will indemnify, hold harmless, and defend Specification Lead and its licensors from any claims
// arising or resulting from: (i) your use of the Specification; (ii) the use or distribution of your Java
// application, applet and/or implementation; and/or (iii) any claims that later versions or releases of any
// Specification furnished to you are incompatible with the Specification provided to you under this license.
// 
// RESTRICTED RIGHTS LEGEND
// 
// U.S. Government: If this Specification is being acquired by or on behalf of the U.S. Government or by a
// U.S. Government prime contractor or subcontractor (at any tier), then the Government's rights in the
// Software and accompanying documentation shall be only as set forth in this license; this is in accordance
// with 48 C.F.R. 227.7201 through 227.7202-4 (for Department of Defense (DoD) acquisitions) and with 48
// C.F.R. 2.101 and 12.212 (for non-DoD acquisitions).
// 
// REPORT
// 
// If you provide Specification Lead with any comments or suggestions concerning the Specification
// ("Feedback"), you hereby: (i) agree that such Feedback is provided on a non-proprietary and non-
// confidential basis, and (ii) grant Specification Lead a perpetual, non-exclusive, worldwide, fully paid-up,
// irrevocable license, with the right to sublicense through multiple levels of sublicensees, to incorporate,
// disclose, and use without limitation the Feedback for any purpose.
// 
// GENERAL TERMS
// 
// Any action related to this Agreement will be governed by California law and controlling U.S. federal law.
// The U.N. Convention for the International Sale of Goods and the choice of law rules of any jurisdiction
// will not apply.
// 
// The Specification is subject to U.S. export control laws and may be subject to export or import
// regulations in other countries. Licensee agrees to comply strictly with all such laws and regulations and
// acknowledges that it has the responsibility to obtain such licenses to export, re-export or import as may
// be required after delivery to Licensee.
// 
// This Agreement is the parties' entire agreement relating to its subject matter. It supersedes all prior or
// contemporaneous oral or written communications, proposals, conditions, representations and
// warranties and prevails over any conflicting or additional terms of any quote, order, acknowledgment,
// or other communication between the parties relating to its subject matter during the term of this
// Agreement. No modification to this Agreement will be binding, unless in writing and signed by an
// authorized representative of each party.
// 
////

[[concepts]]

== Concepts and General Requirements

This chapter overview information and terminology related to this specification, and also includes a general requirements not specified elsewhere in this document.

=== Terminology And Acronyms

A common understanding of security-related terms is helpful for discussion or specification of security APIs. To that end, we incorporate by reference the excellent Apache Shiro Terminology [https://shiro.apache.org/terminology.html[SHIROTERM]], and define some additional terms used in this document.

Authentication Mechanism ::
The mechanism by which authentication is performed. This mechanism interacts with the caller to obtain credentials and invokes an identity store to match the given credentials with a known user (identity). If a match is found, the Authentication Mechanism uses the found identity to populate attributes (principals) to build an authenticated Subject. If a match is not found, the Authentication Mechanism reports a failed authentication, the caller is not logged in, and is unable to be given authorization.

Caller, Caller Principal::
A caller is a user that is making a request to an application, or invoking an application API. A Caller Principal is a Principal object representing that user. This specification uses the term caller in preference to the term user in most contexts.

HAM::
Abbreviation for _HttpAuthenticationMechanism_, an interface defined by this specification.

Identity Store::
An Identity Store is a component that can access application-specific security data such as users, groups, roles, and permissions. It can be thought of as a security-specific DAO (Data Access Object). Synonyms: security provider, repository, store, login module (JAAS), identity manager, service provider, relying party, authenticator, user service. Identity Stores usually have a 1-to-1 correlation with a data source such as a relational database, LDAP directory, file system, or other similar resource. As such, implementations of the _IdentityStore_ interface use data source-specific APIs to discover authorization data (roles, permissions, etc), such as JDBC, File IO, Hibernate or JPA, or any other Data Access API.

JACC::
JSR-115, "Java Authorization Contract for Containers", version 1.5 [https://jcp.org/aboutJava/communityprocess/mrel/jsr115/index3.html[JACC]].

JASPIC::
JSR-196, "Java Authentication SPI for Containers", version 1.1 [https://jcp.org/aboutJava/communityprocess/mrel/jsr196/index2.html[JASPIC]].

SAM::
Abbreviation for _ServerAuthModule_, an interface defined by JASPIC.

=== General Requirements

The following general requirements are defined by this specification.

==== Group-To-Role Mapping

Various Java EE specifications define how roles are declared for an application, and how access to application resources can be restricted to users that have a specific role. The specifications are largely silent on the question of how users are assigned to roles, however. Most application servers have proprietary mechanisms for determining the roles a user has.

Application servers MUST provide a default mapping from group names to roles. That is, a caller who is a member of group "foo" is considered to have role "foo". This default mapping MAY be overridden by explicit proprietary configuration, but, when not overridden, provides sensible and predictable behavior for portable applications.

An application server MAY provide a default mapping from caller principal names to roles. That is, a caller with the name "bar" is considered to have role "bar". This default mapping MAY be overridden by proprietary configuration.

==== Caller Principal Types

This specification defines a principal type called _CallerPrincipal_ to represent the identity of an application caller. Historically, application servers have used different principal types to represent an application's callers, and various Java EE specifications (e.g., JASPIC), provide abstractions to accommodate, "the container's representation of the caller principal".

This specification RECOMMENDS that Java EE application servers that rely on container-specific caller principal types derive those types by extending _CallerPrincipal_, so that portable applications can rely on a consistent representation of the caller principal.

However, we also distinguish here between a "container caller principal" and an "application caller principal", and explicitly allow for each to be represented by a different _Principal_ type.

The container caller principal is a _Principal_ that the container uses to represent a caller's identity. An implementation of this specification MAY choose any _Principal_ type for this purpose. The type chosen may carry additional information, or provide unique behaviors.

An application caller principal is a _Principal_ that an application, or an implementation of, e.g., an _HttpAuthenticationMechanism_, uses to represent a caller's identity. An application MAY choose any _Principal_ type for that purpose. The type chosen may carry additional information, or provide unique behaviors.

Because both containers and applications can have legitimate requirements for specific _Principal_ types to represent a caller, and those types may differ, it MUST be possible for the container to establish both the container's and the application's caller principal as the caller's identity; for example, by including both in a Subject representing the caller.

When both a container caller principal and an application caller principal are present, the value obtained by calling _getName()_ on both principals MUST be the same.

When no specific application caller principal is supplied during authentication, the caller's identity should be represented by a single principal, the container's caller principal.

==== Expression Language Support

This specification defines a number of annotations:

[source,java]
----
DatabaseIdentityStoreDefinition
LdapIdentityStoreDefinition

BasicAuthenticationMechanismDefinition
CustomFormAuthenticationMechanismDefinition
FormAuthenticationMechanismDefinition

LoginToContinue
RememberMe
----

Attributes on these annotations can be provided either as actual values, or as Expression Language 3.0 expressions. In cases where the return type of an attribute is not String, an "EL alternative" attribute is provided, with "Expression" appended to the name. If an "EL alternative" attribute has a non-empty value, it takes precedence over the attribute it's an alternative to, and must contain a valid EL expression that evaluates to the same type as the attribute it's an alternative to.

For more information, see the package javadoc for the javax.security.enterprise package.
 
Expression Language 3.0 is specified by JSR-341, "Expression Language", version 3.0 [https://jcp.org/aboutJava/communityprocess/final/jsr341/index.html[EL30]]
